---
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Depends on
  work-vpc.yml,
  work-securitygroup.yml,
  work-zabbix-server.yml,
  work-route53.yml,
  work-lambda.yml

Parameters:
  PJName:
    Description: Name of this project
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: MyPJ

  ECSAMI:
    Description: ECS-optimized Amazon Linux 2 Latest AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  KeyName: 
    Description: Select your key pair.
    Type: AWS::EC2::KeyPair::KeyName


Resources:
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${PJName}-ECSCluster
      Tags:
        - Key: Name
          Value: !Sub ${PJName}-ECSCluster

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName:
        Fn::ImportValue: !Sub ${PJName}-ECSAutoScalingGroupName
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${PJName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${PJName}-PublicSubnet2
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: "2"
      MaxSize: "2"
      DesiredCapacity: "2"
      Tags:
        - Key: Name
          Value: !Sub ${PJName}-ECSCluster
          PropagateAtLaunch: true
      LifecycleHookSpecificationList:
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 60
          LifecycleHookName: Append-DNS-Record
          LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          NotificationMetadata: !Sub
            - ecs-cluster,${ZoneName},UPSERT
            - {
                ZoneName: !ImportValue HostedZoneName
              }
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 180
          LifecycleHookName: Delete-DNS-Record
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
          NotificationMetadata: !Sub
            - ecs-cluster,${ZoneName},DELETE
            - {
                ZoneName: !ImportValue HostedZoneName
              }
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: t2.micro
      IamInstanceProfile: !Ref IamInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - Fn::ImportValue: !Sub ${PJName}-SgEcsCluster
        - Fn::ImportValue: !Sub ${PJName}-SgZabbixAgent
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            yum install -y https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm
            yum install -y zabbix-agent2
            sed -i -e "s/^Server=127.0.0.1/Server=${ZabbixDomain}/g" /etc/zabbix/zabbix_agent2.conf
            sed -i -e "s/^ServerActive=127.0.0.1/ServerActive=${ZabbixDomain}/g" /etc/zabbix/zabbix_agent2.conf
            sed -i -e "s/^Hostname=Zabbix server/Hostname=ECS Cluster/g" /etc/zabbix/zabbix_agent2.conf
            gpasswd -a zabbix docker
            systemctl start zabbix-agent2
            systemctl enable zabbix-agent2
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
          - {
              ZabbixDomain: !ImportValue ZabbixServerDNSName
            }


Outputs:
  ECSCluster:
    Description: ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${PJName}-EcsCluster
