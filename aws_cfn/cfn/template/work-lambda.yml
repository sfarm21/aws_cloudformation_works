---
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Depends on
  work-vpc.yml 

Parameters:
  PJName:
    Description: Name of this project
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: MyPJ

  # Used to store lambda zip files
  S3Name:
    Description: >-
      Name of the S3 bucket to use for workspace.
      Required files must be stored.
    Type: String
    Default: cfn-workspace-2021****

  ZipFileName:
    Description: Do not include file extensions.
    Type: String
    Default: edit_record

  ECSAutoScalingGroupName:
    Description: Name of the Auto Scaling group to be targeted by EventBridge
    Type: String
    Default: ECS-Cluster


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Project Name
        Parameters: 
          - PJName
      - Label:
          default: Lambda Zip File
        Parameters: 
          - S3Name
          - ZipFileName
      - Label:
          default: Target Auto Scaling group
        Parameters: 
          - ECSAutoScalingGroupName


Resources:
  LifecycleHookEvent:
    Type: AWS::Events::Rule
    Properties: 
      EventPattern:
        {
          "source" : ["aws.autoscaling"],
          "detail-type" : [
            "EC2 Instance-launch Lifecycle Action", 
            "EC2 Instance-terminate Lifecycle Action"
          ],
          "detail" : {
            "AutoScalingGroupName" : [
              { "Ref" : "ECSAutoScalingGroupName" }
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt LifecycleHookLambdaFunction.Arn
          Id: !Ref LifecycleHookLambdaFunction

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LifecycleHookLambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LifecycleHookEvent.Arn

  LifecycleHookLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Name
        S3Key: !Sub ${ZipFileName}.zip
      FunctionName: Lifecycle-hook-function
      Handler: !Sub ${ZipFileName}.lambda_handler
      ReservedConcurrentExecutions: 1
      Runtime: python3.8
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      Policies:
        - PolicyName: LambdaAccessInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:ListHostedZonesByVPC
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListResourceRecordSets
                Resource:
                  - arn:aws:route53:::hostedzone/*


Outputs:
  ECSAutoScalingGroupName:
    Description: ECS Cluster Auto Scaling Group Name
    Value: !Ref ECSAutoScalingGroupName
    Export:
      Name: !Sub ${PJName}-ECSAutoScalingGroupName